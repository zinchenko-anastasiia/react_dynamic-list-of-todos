{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodoId","selectedTodo","selectedUserId","handlerClickReset","className","map","id","userId","completed","title","classNames","type","onClick","handlerClickSelect","TodoFilter","setFilterBy","filterBy","setQuery","query","value","onChange","event","target","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","TodoModal","useState","user","setUser","setTodos","useEffect","fetchData","a","todosFromServer","userFromServer","selectedTodos","filter","todo","hadlerClick","href","name","App","setTodo","setSelectedUserId","setSelectedTodo","isLoading","setLoading","filteredTodos","filterType","toLocaleLowerCase","includes","getFilteredTodo","queryFromInput","ReactDOM","render","document","getElementById"],"mappings":"2QAWaA,EAA4B,SAAC,GAKnC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,aACAC,EACI,EADJA,eAEMC,EAAoB,WACxBF,EAAa,GACbC,EAAe,IAQjB,OACE,wBAAOE,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGL,EAAMM,KAAI,gBACTC,EADS,EACTA,GAAIC,EADK,EACLA,OAAQC,EADH,EACGA,UAAWC,EADd,EACcA,MADd,OAGT,qBACE,UAAQ,OACRL,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGI,GACC,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAWM,IAAW,eACxB,CACE,eAA6B,IAAdF,IAFnB,SAKE,mBAAGJ,UAAWM,IAAW,mBACvB,CACE,mBAAiC,IAAdF,IAFvB,SAKGC,MAGL,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAASZ,IAAmBM,EACxBH,EACA,kBAzDS,SAACG,EAAYC,GACtCN,EAAaK,GACbJ,EAAeK,GAuDOM,CAAmBP,EAAIC,IANnC,SAQGP,IAAmBM,EAEhB,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAIf,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAxClBE,YC3CJQ,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SACAC,EACI,EADJA,MAQA,OACE,uBAAMd,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRe,MAAOH,EACPI,SAbkB,SAACC,GAAD,OAC1BN,EAAYM,EAAMC,OAAOH,QASnB,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGf,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACVmB,YAAY,YACZJ,MAAOD,EACPE,SA3BmB,SAACC,GAAD,OACzBJ,EAASI,EAAMC,OAAOH,UA4BlB,sBAAMf,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBoB,MAAO,CAAEC,cAAe,OAAxD,SACGP,EAAMQ,OAAS,GAGZ,wBACE,UAAQ,oBACRf,KAAK,SACLP,UAAU,SACVQ,QAvCO,kBAAMK,EAAS,gBCbzBU,G,MAAmB,kBAC9B,qBAAKvB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASwB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAAMC,EAAW,kBAAMX,EAAY,WAE7BY,EAAU,SAACjC,GAAD,OAAoBqB,EAAG,iBAAiBrB,KCVlDkC,EAA6B,SAAC,GAKpC,IAJLlC,EAII,EAJJA,OACAP,EAGI,EAHJA,eACAC,EAEI,EAFJA,aACAC,EACI,EADJA,eAEA,EAAwBwC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAiB,IAA3C,mBAAO3C,EAAP,KAAc8C,EAAd,KAEAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,8BAAAC,EAAA,sEACcT,IADd,cACVU,EADU,gBAEaT,EAAQjC,GAFrB,OAEV2C,EAFU,OAIhBN,EAAQM,GACRL,EAASI,GALO,2CAAH,qDAQfF,MACC,CAAC/C,IAEJ,IAAMmD,EAAgBpD,EAAMqD,QAAO,SAAAC,GAAI,OAAIA,EAAK/C,KAAON,KACjDsD,EAAc,WAClBrD,EAAa,GACbC,EAAe,IAGjB,OACE,sBAAKE,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbuC,EAGA,qBAAKvC,UAAU,aAAf,SACG+C,EAAc9C,KAAI,gBAAGC,EAAH,EAAGA,GAAIG,EAAP,EAAOA,MAAOD,EAAd,EAAcA,UAAd,OACjB,qCACE,yBAAQJ,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYE,KAIZ,wBACEK,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAAS0C,OAGb,sBAAKlD,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGK,IAGH,oBAAGL,UAAU,QAAQ,UAAQ,aAA7B,WACiB,IAAdI,EACI,wBAAQJ,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEJ,OAED,mBAAGmD,KAAK,2BAAR,SACGZ,EAAKa,qBAlClB,cAAC,EAAD,QCVD,IAAMC,EAAgB,WAC3B,MAAyBf,mBAAiB,IAA1C,mBAAO3C,EAAP,KAAc2D,EAAd,KACA,EAA4ChB,mBAAS,GAArD,mBAAOxC,EAAP,KAAuByD,EAAvB,KACA,EAAwCjB,mBAAS,GAAjD,mBAAOzC,EAAP,KAAqB2D,EAArB,KACA,EAAgClB,mBAAS,OAAzC,mBAAO1B,EAAP,KAAiBD,EAAjB,KACA,EAA0B2B,mBAAS,IAAnC,mBAAOxB,EAAP,KAAcD,EAAd,KACA,EAAgCyB,oBAAS,GAAzC,mBAAOmB,EAAP,KAAkBC,EAAlB,KAEAhB,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACcT,IADd,OACVU,EADU,OAGhBa,GAAW,GAEXJ,EAAQT,GALQ,2CAAH,qDAQfF,MACC,IAEH,IAAMgB,EA3CD,SACLhE,EACAiE,EACA9C,GAeA,OAbqBnB,EAAMqD,QAAO,SAACC,GACjC,OAAQW,GACN,IAAK,SACH,OAA0B,IAAnBX,EAAK7C,UAEd,IAAK,YACH,OAA0B,IAAnB6C,EAAK7C,UAEd,QACE,OAAO6C,MAIOD,QAAO,qBAAG3C,MACtBwD,oBAAoBC,SAAShD,EAAM+C,wBAwBrBE,CAAgBpE,EAAOiB,EAAUE,GAEvD,OACE,qCACE,qBAAKd,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEW,YAAaA,EACbC,SAAUA,EACVC,SAAU,SAACmD,GACTnD,EAASmD,IAEXlD,MAAOA,MAIX,qBAAKd,UAAU,QAAf,SACGyD,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,CACE9D,MAAOgE,EACP/D,eAAgBC,EAChBA,aAAc,SAACK,GACbsD,EAAgBtD,IAElBJ,eAAgB,SAACK,GACfoD,EAAkBpD,eAShB,IAAjBN,GAEG,cAAC,EAAD,CACEM,OAAQL,EACRF,eAAgBC,EAChBA,aAAc,SAACK,GACbsD,EAAgBtD,IAElBJ,eAAgB,SAACK,GACfoD,EAAkBpD,UCrGhC8D,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.18187caa.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodoId: number,\n  selectedTodo: (value: number) => void,\n  selectedUserId: (value: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  selectedTodo,\n  selectedUserId,\n}) => {\n  const handlerClickReset = () => {\n    selectedTodo(0);\n    selectedUserId(0);\n  };\n\n  const handlerClickSelect = (id: number, userId: number) => {\n    selectedTodo(id);\n    selectedUserId(userId);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({\n          id, userId, completed, title,\n        }) => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className={classNames('is-vcentered',\n              {\n                'is-expanded': completed === false,\n              })}\n            >\n              <p className={classNames('has-text-success',\n                {\n                  'has-text-danger': completed === false,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={selectedTodoId === id\n                  ? handlerClickReset\n                  : () => handlerClickSelect(id, userId)}\n              >\n                {selectedTodoId === id\n                  ? (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  )\n                  : (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n\n                  )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","interface Props {\n  setFilterBy: (value: string) => void;\n  filterBy: string,\n  setQuery: (value: string) => void;\n  query: string;\n}\nexport const TodoFilter: React.FC<Props> = ({\n  setFilterBy,\n  filterBy,\n  setQuery,\n  query,\n}) => {\n  const handlerChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => (\n    setFilterBy(event.target.value));\n  const handlerChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => (\n    setQuery(event.target.value));\n  const handlerReset = () => setQuery('');\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterBy}\n            onChange={handlerChangeSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handlerChangeInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0\n            && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handlerReset}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getTodos, getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  userId: number;\n  selectedTodoId: number;\n  selectedTodo: (value: number) => void,\n  selectedUserId: (value: number) => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  userId,\n  selectedTodoId,\n  selectedTodo,\n  selectedUserId,\n}) => {\n  const [user, setUser] = useState<User>();\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const todosFromServer = await getTodos();\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n      setTodos(todosFromServer);\n    };\n\n    fetchData();\n  }, [selectedTodoId]);\n\n  const selectedTodos = todos.filter(todo => todo.id === selectedTodoId);\n  const hadlerClick = () => {\n    selectedTodo(0);\n    selectedUserId(0);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          {selectedTodos.map(({ id, title, completed }) => (\n            <>\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={hadlerClick}\n                />\n              </header>\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {completed === true\n                    ? (<strong className=\"has-text-success\">Done</strong>)\n                    : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                  {' by '}\n\n                  <a href=\"mailto:Sincere@april.biz\">\n                    {user.name}\n                  </a>\n                </p>\n              </div>\n\n            </>\n\n          ))}\n\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport function getFilteredTodo(\n  todos: Todo[],\n  filterType: string,\n  query: string,\n) {\n  const filterByType = todos.filter((todo) => {\n    switch (filterType) {\n      case 'active':\n        return todo.completed === false;\n\n      case 'completed':\n        return todo.completed === true;\n\n      default:\n        return todo;\n    }\n  });\n\n  return filterByType.filter(({ title }) => (\n    title.toLocaleLowerCase().includes(query.toLocaleLowerCase())\n  ));\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodo] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedTodo, setSelectedTodo] = useState(0);\n  const [filterBy, setFilterBy] = useState('all');\n  const [query, setQuery] = useState('');\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const todosFromServer = await getTodos();\n\n      setLoading(false);\n\n      setTodo(todosFromServer);\n    };\n\n    fetchData();\n  }, []);\n\n  const filteredTodos = getFilteredTodo(todos, filterBy, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilterBy={setFilterBy}\n                filterBy={filterBy}\n                setQuery={(queryFromInput) => {\n                  setQuery(queryFromInput);\n                }}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodoId={selectedTodo}\n                    selectedTodo={(id) => {\n                      setSelectedTodo(id);\n                    }}\n                    selectedUserId={(userId) => {\n                      setSelectedUserId(userId);\n                    }}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo !== 0\n        && (\n          <TodoModal\n            userId={selectedUserId}\n            selectedTodoId={selectedTodo}\n            selectedTodo={(id) => {\n              setSelectedTodo(id);\n            }}\n            selectedUserId={(userId) => {\n              setSelectedUserId(userId);\n            }}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}